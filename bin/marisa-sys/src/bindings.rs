/* automatically generated by rust-bindgen 0.63.0 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type istream = u8;
        pub type ostream = u8;
        #[repr(C)]
        #[repr(align(8))]
        #[derive(Debug, Copy, Clone)]
        pub struct exception {
            pub _bindgen_opaque_blob: u64,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                ::std::mem::size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                ::std::mem::align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionC1Ev"]
            pub fn exception_exception(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionC1ERKS_"]
            pub fn exception_exception1(
                this: *mut root::std::exception,
                arg1: *const root::std::exception,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionC1EOS_"]
            pub fn exception_exception2(
                this: *mut root::std::exception,
                arg1: *mut root::std::exception,
            );
        }
        impl exception {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                exception_exception(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::exception) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                exception_exception1(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(arg1: *mut root::std::exception) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                exception_exception2(__bindgen_tmp.as_mut_ptr(), arg1);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    pub mod marisa {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5freadEP8_IO_FILEPNS_4TrieE"]
            pub fn fread(file: *mut root::_IO_FILE, trie: *mut root::marisa::Trie);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6fwriteEP8_IO_FILERKNS_4TrieE"]
            pub fn fwrite(file: *mut root::_IO_FILE, trie: *const root::marisa::Trie);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4readERSiPNS_4TrieE"]
            pub fn read(
                stream: *mut root::std::istream,
                trie: *mut root::marisa::Trie,
            ) -> *mut root::std::istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5writeERSoRKNS_4TrieE"]
            pub fn write(
                stream: *mut root::std::ostream,
                trie: *const root::marisa::Trie,
            ) -> *mut root::std::ostream;
        }
        pub type UInt8 = root::marisa_uint8;
        pub type UInt16 = root::marisa_uint16;
        pub type UInt32 = root::marisa_uint32;
        pub type UInt64 = root::marisa_uint64;
        pub use self::super::super::root::marisa_cache_level as CacheLevel;
        pub use self::super::super::root::marisa_error_code as ErrorCode;
        pub use self::super::super::root::marisa_node_order as NodeOrder;
        pub use self::super::super::root::marisa_tail_mode as TailMode;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Exception {
            pub _base: root::std::exception,
            pub filename_: *const ::std::os::raw::c_char,
            pub line_: ::std::os::raw::c_int,
            pub error_code_: root::marisa::ErrorCode,
            pub error_message_: *const ::std::os::raw::c_char,
        }
        #[test]
        fn bindgen_test_layout_Exception() {
            const UNINIT: ::std::mem::MaybeUninit<Exception> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Exception>(),
                32usize,
                concat!("Size of: ", stringify!(Exception))
            );
            assert_eq!(
                ::std::mem::align_of::<Exception>(),
                8usize,
                concat!("Alignment of ", stringify!(Exception))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).filename_) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Exception),
                    "::",
                    stringify!(filename_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).line_) as usize - ptr as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Exception),
                    "::",
                    stringify!(line_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).error_code_) as usize - ptr as usize },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Exception),
                    "::",
                    stringify!(error_code_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).error_message_) as usize - ptr as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Exception),
                    "::",
                    stringify!(error_message_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa9Exception8filenameEv"]
            pub fn Exception_filename(
                this: *const root::marisa::Exception,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa9Exception4lineEv"]
            pub fn Exception_line(this: *const root::marisa::Exception) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa9Exception10error_codeEv"]
            pub fn Exception_error_code(
                this: *const root::marisa::Exception,
            ) -> root::marisa::ErrorCode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa9Exception13error_messageEv"]
            pub fn Exception_error_message(
                this: *const root::marisa::Exception,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa9ExceptionC1EPKci18marisa_error_code_S2_"]
            pub fn Exception_Exception(
                this: *mut root::marisa::Exception,
                filename: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
                error_code: root::marisa::ErrorCode,
                error_message: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa9ExceptionC1ERKS0_"]
            pub fn Exception_Exception1(
                this: *mut root::marisa::Exception,
                ex: *const root::marisa::Exception,
            );
        }
        impl Exception {
            #[inline]
            pub unsafe fn filename(&self) -> *const ::std::os::raw::c_char {
                Exception_filename(self)
            }
            #[inline]
            pub unsafe fn line(&self) -> ::std::os::raw::c_int {
                Exception_line(self)
            }
            #[inline]
            pub unsafe fn error_code(&self) -> root::marisa::ErrorCode {
                Exception_error_code(self)
            }
            #[inline]
            pub unsafe fn error_message(&self) -> *const ::std::os::raw::c_char {
                Exception_error_message(self)
            }
            #[inline]
            pub unsafe fn new(
                filename: *const ::std::os::raw::c_char,
                line: ::std::os::raw::c_int,
                error_code: root::marisa::ErrorCode,
                error_message: *const ::std::os::raw::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Exception_Exception(
                    __bindgen_tmp.as_mut_ptr(),
                    filename,
                    line,
                    error_code,
                    error_message,
                );
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(ex: *const root::marisa::Exception) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Exception_Exception1(__bindgen_tmp.as_mut_ptr(), ex);
                __bindgen_tmp.assume_init()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa9ExceptionD1Ev"]
            pub fn Exception_Exception_destructor(this: *mut root::marisa::Exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa9Exception4whatEv"]
            pub fn Exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct scoped_ptr<T> {
            pub ptr_: *mut T,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct scoped_array<T> {
            pub array_: *mut T,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct Key {
            pub ptr_: *const ::std::os::raw::c_char,
            pub length_: root::marisa::UInt32,
            pub union_: root::marisa::Key_Union,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union Key_Union {
            pub id: root::marisa::UInt32,
            pub weight: f32,
        }
        #[test]
        fn bindgen_test_layout_Key_Union() {
            const UNINIT: ::std::mem::MaybeUninit<Key_Union> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Key_Union>(),
                4usize,
                concat!("Size of: ", stringify!(Key_Union))
            );
            assert_eq!(
                ::std::mem::align_of::<Key_Union>(),
                4usize,
                concat!("Alignment of ", stringify!(Key_Union))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Key_Union),
                    "::",
                    stringify!(id)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Key_Union),
                    "::",
                    stringify!(weight)
                )
            );
        }
        #[test]
        fn bindgen_test_layout_Key() {
            const UNINIT: ::std::mem::MaybeUninit<Key> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Key>(),
                16usize,
                concat!("Size of: ", stringify!(Key))
            );
            assert_eq!(
                ::std::mem::align_of::<Key>(),
                8usize,
                concat!("Alignment of ", stringify!(Key))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).ptr_) as usize - ptr as usize },
                0usize,
                concat!("Offset of field: ", stringify!(Key), "::", stringify!(ptr_))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).length_) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Key),
                    "::",
                    stringify!(length_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).union_) as usize - ptr as usize },
                12usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Key),
                    "::",
                    stringify!(union_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key7set_strEPKc"]
            pub fn Key_set_str(this: *mut root::marisa::Key, str_: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key7set_strEPKcm"]
            pub fn Key_set_str1(
                this: *mut root::marisa::Key,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key6set_idEm"]
            pub fn Key_set_id(this: *mut root::marisa::Key, id: usize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key10set_weightEf"]
            pub fn Key_set_weight(this: *mut root::marisa::Key, weight: f32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa3Key3ptrEv"]
            pub fn Key_ptr(this: *const root::marisa::Key) -> *const u8;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa3Key6lengthEv"]
            pub fn Key_length(this: *const root::marisa::Key) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa3Key2idEv"]
            pub fn Key_id(this: *const root::marisa::Key) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa3Key6weightEv"]
            pub fn Key_weight(this: *const root::marisa::Key) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key5clearEv"]
            pub fn Key_clear(this: *mut root::marisa::Key);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3Key4swapERS0_"]
            pub fn Key_swap(this: *mut root::marisa::Key, rhs: *mut root::marisa::Key);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3KeyC1Ev"]
            pub fn Key_Key(this: *mut root::marisa::Key);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa3KeyC1ERKS0_"]
            pub fn Key_Key1(this: *mut root::marisa::Key, key: *const root::marisa::Key);
        }
        impl Key {
            #[inline]
            pub unsafe fn set_str(&mut self, str_: *const ::std::os::raw::c_char) {
                Key_set_str(self, str_)
            }
            #[inline]
            pub unsafe fn set_str1(&mut self, ptr: *const ::std::os::raw::c_char, length: usize) {
                Key_set_str1(self, ptr, length)
            }
            #[inline]
            pub unsafe fn set_id(&mut self, id: usize) {
                Key_set_id(self, id)
            }
            #[inline]
            pub unsafe fn set_weight(&mut self, weight: f32) {
                Key_set_weight(self, weight)
            }
            #[inline]
            pub unsafe fn ptr(&self) -> *const u8 {
                Key_ptr(self)
            }
            #[inline]
            pub unsafe fn length(&self) -> usize {
                Key_length(self)
            }
            #[inline]
            pub unsafe fn id(&self) -> usize {
                Key_id(self)
            }
            #[inline]
            pub unsafe fn weight(&self) -> f32 {
                Key_weight(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                Key_clear(self)
            }
            #[inline]
            pub unsafe fn swap(&mut self, rhs: *mut root::marisa::Key) {
                Key_swap(self, rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Key_Key(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(key: *const root::marisa::Key) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Key_Key1(__bindgen_tmp.as_mut_ptr(), key);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        pub struct Keyset {
            pub base_blocks_:
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            pub base_blocks_size_: usize,
            pub base_blocks_capacity_: usize,
            pub extra_blocks_:
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            pub extra_blocks_size_: usize,
            pub extra_blocks_capacity_: usize,
            pub key_blocks_:
                root::marisa::scoped_array<root::marisa::scoped_array<root::marisa::Key>>,
            pub key_blocks_size_: usize,
            pub key_blocks_capacity_: usize,
            pub ptr_: *mut ::std::os::raw::c_char,
            pub avail_: usize,
            pub size_: usize,
            pub total_length_: usize,
        }
        pub const Keyset_BASE_BLOCK_SIZE: root::marisa::Keyset__bindgen_ty_1 = 4096;
        pub const Keyset_EXTRA_BLOCK_SIZE: root::marisa::Keyset__bindgen_ty_1 = 1024;
        pub const Keyset_KEY_BLOCK_SIZE: root::marisa::Keyset__bindgen_ty_1 = 256;
        pub type Keyset__bindgen_ty_1 = ::std::os::raw::c_uint;
        #[test]
        fn bindgen_test_layout_Keyset() {
            const UNINIT: ::std::mem::MaybeUninit<Keyset> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Keyset>(),
                104usize,
                concat!("Size of: ", stringify!(Keyset))
            );
            assert_eq!(
                ::std::mem::align_of::<Keyset>(),
                8usize,
                concat!("Alignment of ", stringify!(Keyset))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).base_blocks_) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(base_blocks_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).base_blocks_size_) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(base_blocks_size_)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).base_blocks_capacity_) as usize - ptr as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(base_blocks_capacity_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).extra_blocks_) as usize - ptr as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(extra_blocks_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).extra_blocks_size_) as usize - ptr as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(extra_blocks_size_)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).extra_blocks_capacity_) as usize - ptr as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(extra_blocks_capacity_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).key_blocks_) as usize - ptr as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(key_blocks_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).key_blocks_size_) as usize - ptr as usize },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(key_blocks_size_)
                )
            );
            assert_eq!(
                unsafe {
                    ::std::ptr::addr_of!((*ptr).key_blocks_capacity_) as usize - ptr as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(key_blocks_capacity_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).ptr_) as usize - ptr as usize },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(ptr_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).avail_) as usize - ptr as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(avail_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(size_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).total_length_) as usize - ptr as usize },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Keyset),
                    "::",
                    stringify!(total_length_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset9push_backERKNS_3KeyE"]
            pub fn Keyset_push_back(this: *mut root::marisa::Keyset, key: *const root::marisa::Key);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset9push_backERKNS_3KeyEc"]
            pub fn Keyset_push_back1(
                this: *mut root::marisa::Keyset,
                key: *const root::marisa::Key,
                end_marker: ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset9push_backEPKc"]
            pub fn Keyset_push_back2(
                this: *mut root::marisa::Keyset,
                str_: *const u8,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset9push_backEPKcmf"]
            pub fn Keyset_push_back3(
                this: *mut root::marisa::Keyset,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
                weight: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa6Keyset8num_keysEv"]
            pub fn Keyset_num_keys(this: *const root::marisa::Keyset) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa6Keyset5emptyEv"]
            pub fn Keyset_empty(this: *const root::marisa::Keyset) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa6Keyset4sizeEv"]
            pub fn Keyset_size(this: *const root::marisa::Keyset) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa6Keyset12total_lengthEv"]
            pub fn Keyset_total_length(this: *const root::marisa::Keyset) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset5resetEv"]
            pub fn Keyset_reset(this: *mut root::marisa::Keyset);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset5clearEv"]
            pub fn Keyset_clear(this: *mut root::marisa::Keyset);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6Keyset4swapERS0_"]
            pub fn Keyset_swap(this: *mut root::marisa::Keyset, rhs: *mut root::marisa::Keyset);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa6KeysetC1Ev"]
            pub fn Keyset_Keyset(this: *mut root::marisa::Keyset);
        }
        impl Keyset {
            #[inline]
            pub unsafe fn push_back(&mut self, key: *const root::marisa::Key) {
                Keyset_push_back(self, key)
            }
            #[inline]
            pub unsafe fn push_back1(
                &mut self,
                key: *const root::marisa::Key,
                end_marker: ::std::os::raw::c_char,
            ) {
                Keyset_push_back1(self, key, end_marker)
            }
            #[inline]
            // tokuhirom's handwritten method
            pub unsafe fn push_back2(&mut self, str_: String) {
                Keyset_push_back2(self, str_.as_ptr())
            }
            #[inline]
            pub unsafe fn push_back3(
                &mut self,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
                weight: f32,
            ) {
                Keyset_push_back3(self, ptr, length, weight)
            }
            #[inline]
            pub unsafe fn num_keys(&self) -> usize {
                Keyset_num_keys(self)
            }
            #[inline]
            pub unsafe fn empty(&self) -> bool {
                Keyset_empty(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> usize {
                Keyset_size(self)
            }
            #[inline]
            pub unsafe fn total_length(&self) -> usize {
                Keyset_total_length(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                Keyset_reset(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                Keyset_clear(self)
            }
            #[inline]
            pub unsafe fn swap(&mut self, rhs: *mut root::marisa::Keyset) {
                Keyset_swap(self, rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Keyset_Keyset(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Query {
            pub ptr_: *const ::std::os::raw::c_char,
            pub length_: usize,
            pub id_: usize,
        }
        #[test]
        fn bindgen_test_layout_Query() {
            const UNINIT: ::std::mem::MaybeUninit<Query> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Query>(),
                24usize,
                concat!("Size of: ", stringify!(Query))
            );
            assert_eq!(
                ::std::mem::align_of::<Query>(),
                8usize,
                concat!("Alignment of ", stringify!(Query))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).ptr_) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Query),
                    "::",
                    stringify!(ptr_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).length_) as usize - ptr as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Query),
                    "::",
                    stringify!(length_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).id_) as usize - ptr as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Query),
                    "::",
                    stringify!(id_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Query7set_strEPKc"]
            pub fn Query_set_str(
                this: *mut root::marisa::Query,
                str_: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Query7set_strEPKcm"]
            pub fn Query_set_str1(
                this: *mut root::marisa::Query,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Query6set_idEm"]
            pub fn Query_set_id(this: *mut root::marisa::Query, id: usize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Query3ptrEv"]
            pub fn Query_ptr(this: *const root::marisa::Query) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Query6lengthEv"]
            pub fn Query_length(this: *const root::marisa::Query) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Query2idEv"]
            pub fn Query_id(this: *const root::marisa::Query) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Query5clearEv"]
            pub fn Query_clear(this: *mut root::marisa::Query);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Query4swapERS0_"]
            pub fn Query_swap(this: *mut root::marisa::Query, rhs: *mut root::marisa::Query);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5QueryC1Ev"]
            pub fn Query_Query(this: *mut root::marisa::Query);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5QueryC1ERKS0_"]
            pub fn Query_Query1(this: *mut root::marisa::Query, query: *const root::marisa::Query);
        }
        impl Query {
            #[inline]
            pub unsafe fn set_str(&mut self, str_: *const ::std::os::raw::c_char) {
                Query_set_str(self, str_)
            }
            #[inline]
            pub unsafe fn set_str1(&mut self, ptr: *const ::std::os::raw::c_char, length: usize) {
                Query_set_str1(self, ptr, length)
            }
            #[inline]
            pub unsafe fn set_id(&mut self, id: usize) {
                Query_set_id(self, id)
            }
            #[inline]
            pub unsafe fn ptr(&self) -> *const ::std::os::raw::c_char {
                Query_ptr(self)
            }
            #[inline]
            pub unsafe fn length(&self) -> usize {
                Query_length(self)
            }
            #[inline]
            pub unsafe fn id(&self) -> usize {
                Query_id(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                Query_clear(self)
            }
            #[inline]
            pub unsafe fn swap(&mut self, rhs: *mut root::marisa::Query) {
                Query_swap(self, rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Query_Query(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(query: *const root::marisa::Query) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Query_Query1(__bindgen_tmp.as_mut_ptr(), query);
                __bindgen_tmp.assume_init()
            }
        }
        pub mod grimoire {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod trie {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct State {
                    _unused: [u8; 0],
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct LoudsTrie {
                    _unused: [u8; 0],
                }
            }
        }
        #[repr(C)]
        pub struct Agent {
            pub query_: root::marisa::Query,
            pub key_: root::marisa::Key,
            pub state_: root::marisa::scoped_ptr<root::marisa::grimoire::trie::State>,
        }
        #[test]
        fn bindgen_test_layout_Agent() {
            const UNINIT: ::std::mem::MaybeUninit<Agent> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Agent>(),
                48usize,
                concat!("Size of: ", stringify!(Agent))
            );
            assert_eq!(
                ::std::mem::align_of::<Agent>(),
                8usize,
                concat!("Alignment of ", stringify!(Agent))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).query_) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Agent),
                    "::",
                    stringify!(query_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).key_) as usize - ptr as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Agent),
                    "::",
                    stringify!(key_)
                )
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).state_) as usize - ptr as usize },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Agent),
                    "::",
                    stringify!(state_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Agent5queryEv"]
            pub fn Agent_query(this: *const root::marisa::Agent) -> *const root::marisa::Query;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Agent3keyEv"]
            pub fn Agent_key(this: *const root::marisa::Agent) -> *const root::marisa::Key;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent9set_queryEPKc"]
            pub fn Agent_set_query(
                this: *mut root::marisa::Agent,
                str_: *const u8,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent9set_queryEPKcm"]
            pub fn Agent_set_query1(
                this: *mut root::marisa::Agent,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent9set_queryEm"]
            pub fn Agent_set_query2(this: *mut root::marisa::Agent, key_id: usize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Agent5stateEv"]
            pub fn Agent_state(
                this: *const root::marisa::Agent,
            ) -> *const root::marisa::grimoire::trie::State;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent5stateEv"]
            pub fn Agent_state1(
                this: *mut root::marisa::Agent,
            ) -> *mut root::marisa::grimoire::trie::State;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent7set_keyEPKc"]
            pub fn Agent_set_key(
                this: *mut root::marisa::Agent,
                str_: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent7set_keyEPKcm"]
            pub fn Agent_set_key1(
                this: *mut root::marisa::Agent,
                ptr: *const ::std::os::raw::c_char,
                length: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent7set_keyEm"]
            pub fn Agent_set_key2(this: *mut root::marisa::Agent, id: usize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa5Agent9has_stateEv"]
            pub fn Agent_has_state(this: *const root::marisa::Agent) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent10init_stateEv"]
            pub fn Agent_init_state(this: *mut root::marisa::Agent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent5clearEv"]
            pub fn Agent_clear(this: *mut root::marisa::Agent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5Agent4swapERS0_"]
            pub fn Agent_swap(this: *mut root::marisa::Agent, rhs: *mut root::marisa::Agent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5AgentC1Ev"]
            pub fn Agent_Agent(this: *mut root::marisa::Agent);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa5AgentD1Ev"]
            pub fn Agent_Agent_destructor(this: *mut root::marisa::Agent);
        }
        impl Agent {
            #[inline]
            pub unsafe fn query(&self) -> *const root::marisa::Query {
                Agent_query(self)
            }
            #[inline]
            pub unsafe fn key(&self) -> *const root::marisa::Key {
                Agent_key(self)
            }
            #[inline]
            pub unsafe fn set_query(&mut self, str_: String) {
                Agent_set_query(self, str_.as_ptr())
            }
            #[inline]
            pub unsafe fn set_query1(&mut self, ptr: *const ::std::os::raw::c_char, length: usize) {
                Agent_set_query1(self, ptr, length)
            }
            #[inline]
            pub unsafe fn set_query2(&mut self, key_id: usize) {
                Agent_set_query2(self, key_id)
            }
            #[inline]
            pub unsafe fn state(&self) -> *const root::marisa::grimoire::trie::State {
                Agent_state(self)
            }
            #[inline]
            pub unsafe fn state1(&mut self) -> *mut root::marisa::grimoire::trie::State {
                Agent_state1(self)
            }
            #[inline]
            pub unsafe fn set_key(&mut self, str_: *const ::std::os::raw::c_char) {
                Agent_set_key(self, str_)
            }
            #[inline]
            pub unsafe fn set_key1(&mut self, ptr: *const ::std::os::raw::c_char, length: usize) {
                Agent_set_key1(self, ptr, length)
            }
            #[inline]
            pub unsafe fn set_key2(&mut self, id: usize) {
                Agent_set_key2(self, id)
            }
            #[inline]
            pub unsafe fn has_state(&self) -> bool {
                Agent_has_state(self)
            }
            #[inline]
            pub unsafe fn init_state(&mut self) {
                Agent_init_state(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                Agent_clear(self)
            }
            #[inline]
            pub unsafe fn swap(&mut self, rhs: *mut root::marisa::Agent) {
                Agent_swap(self, rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Agent_Agent(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Agent_Agent_destructor(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Trie {
            pub trie_: root::marisa::scoped_ptr<root::marisa::grimoire::trie::LoudsTrie>,
        }
        #[test]
        fn bindgen_test_layout_Trie() {
            const UNINIT: ::std::mem::MaybeUninit<Trie> = ::std::mem::MaybeUninit::uninit();
            let ptr = UNINIT.as_ptr();
            assert_eq!(
                ::std::mem::size_of::<Trie>(),
                8usize,
                concat!("Size of: ", stringify!(Trie))
            );
            assert_eq!(
                ::std::mem::align_of::<Trie>(),
                8usize,
                concat!("Alignment of ", stringify!(Trie))
            );
            assert_eq!(
                unsafe { ::std::ptr::addr_of!((*ptr).trie_) as usize - ptr as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Trie),
                    "::",
                    stringify!(trie_)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie5buildERNS_6KeysetEi"]
            pub fn Trie_build(
                this: *mut root::marisa::Trie,
                keyset: *mut root::marisa::Keyset,
                config_flags: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie4mmapEPKc"]
            pub fn Trie_mmap(
                this: *mut root::marisa::Trie,
                filename: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie3mapEPKvm"]
            pub fn Trie_map(
                this: *mut root::marisa::Trie,
                ptr: *const ::std::os::raw::c_void,
                size: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie4loadEPKc"]
            pub fn Trie_load(
                this: *mut root::marisa::Trie,
                filename: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie4readEi"]
            pub fn Trie_read(this: *mut root::marisa::Trie, fd: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie4saveEPKc"]
            pub fn Trie_save(
                this: *const root::marisa::Trie,
                filename: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie5writeEi"]
            pub fn Trie_write(this: *const root::marisa::Trie, fd: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie6lookupERNS_5AgentE"]
            pub fn Trie_lookup(
                this: *const root::marisa::Trie,
                agent: *mut root::marisa::Agent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie14reverse_lookupERNS_5AgentE"]
            pub fn Trie_reverse_lookup(
                this: *const root::marisa::Trie,
                agent: *mut root::marisa::Agent,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie20common_prefix_searchERNS_5AgentE"]
            pub fn Trie_common_prefix_search(
                this: *const root::marisa::Trie,
                agent: *mut root::marisa::Agent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie17predictive_searchERNS_5AgentE"]
            pub fn Trie_predictive_search(
                this: *const root::marisa::Trie,
                agent: *mut root::marisa::Agent,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie9num_triesEv"]
            pub fn Trie_num_tries(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie8num_keysEv"]
            pub fn Trie_num_keys(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie9num_nodesEv"]
            pub fn Trie_num_nodes(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie9tail_modeEv"]
            pub fn Trie_tail_mode(this: *const root::marisa::Trie) -> root::marisa::TailMode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie10node_orderEv"]
            pub fn Trie_node_order(this: *const root::marisa::Trie) -> root::marisa::NodeOrder;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie5emptyEv"]
            pub fn Trie_empty(this: *const root::marisa::Trie) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie4sizeEv"]
            pub fn Trie_size(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie10total_sizeEv"]
            pub fn Trie_total_size(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNK6marisa4Trie7io_sizeEv"]
            pub fn Trie_io_size(this: *const root::marisa::Trie) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie5clearEv"]
            pub fn Trie_clear(this: *mut root::marisa::Trie);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4Trie4swapERS0_"]
            pub fn Trie_swap(this: *mut root::marisa::Trie, rhs: *mut root::marisa::Trie);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4TrieC1Ev"]
            pub fn Trie_Trie(this: *mut root::marisa::Trie);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN6marisa4TrieD1Ev"]
            pub fn Trie_Trie_destructor(this: *mut root::marisa::Trie);
        }
        impl Trie {
            #[inline]
            pub unsafe fn build(
                &mut self,
                keyset: *mut root::marisa::Keyset,
                config_flags: ::std::os::raw::c_int,
            ) {
                Trie_build(self, keyset, config_flags)
            }
            #[inline]
            pub unsafe fn mmap(&mut self, filename: *const ::std::os::raw::c_char) {
                Trie_mmap(self, filename)
            }
            #[inline]
            pub unsafe fn map(&mut self, ptr: *const ::std::os::raw::c_void, size: usize) {
                Trie_map(self, ptr, size)
            }
            #[inline]
            pub unsafe fn load(&mut self, filename: *const ::std::os::raw::c_char) {
                Trie_load(self, filename)
            }
            #[inline]
            pub unsafe fn read(&mut self, fd: ::std::os::raw::c_int) {
                Trie_read(self, fd)
            }
            #[inline]
            pub unsafe fn save(&self, filename: *const ::std::os::raw::c_char) {
                Trie_save(self, filename)
            }
            #[inline]
            pub unsafe fn write(&self, fd: ::std::os::raw::c_int) {
                Trie_write(self, fd)
            }
            #[inline]
            pub unsafe fn lookup(&self, agent: *mut root::marisa::Agent) -> bool {
                Trie_lookup(self, agent)
            }
            #[inline]
            pub unsafe fn reverse_lookup(&self, agent: *mut root::marisa::Agent) {
                Trie_reverse_lookup(self, agent)
            }
            #[inline]
            pub unsafe fn common_prefix_search(&self, agent: *mut root::marisa::Agent) -> bool {
                Trie_common_prefix_search(self, agent)
            }
            #[inline]
            pub unsafe fn predictive_search(&self, agent: *mut root::marisa::Agent) -> bool {
                Trie_predictive_search(self, agent)
            }
            #[inline]
            pub unsafe fn num_tries(&self) -> usize {
                Trie_num_tries(self)
            }
            #[inline]
            pub unsafe fn num_keys(&self) -> usize {
                Trie_num_keys(self)
            }
            #[inline]
            pub unsafe fn num_nodes(&self) -> usize {
                Trie_num_nodes(self)
            }
            #[inline]
            pub unsafe fn tail_mode(&self) -> root::marisa::TailMode {
                Trie_tail_mode(self)
            }
            #[inline]
            pub unsafe fn node_order(&self) -> root::marisa::NodeOrder {
                Trie_node_order(self)
            }
            #[inline]
            pub unsafe fn empty(&self) -> bool {
                Trie_empty(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> usize {
                Trie_size(self)
            }
            #[inline]
            pub unsafe fn total_size(&self) -> usize {
                Trie_total_size(self)
            }
            #[inline]
            pub unsafe fn io_size(&self) -> usize {
                Trie_io_size(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                Trie_clear(self)
            }
            #[inline]
            pub unsafe fn swap(&mut self, rhs: *mut root::marisa::Trie) {
                Trie_swap(self, rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Trie_Trie(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                Trie_Trie_destructor(self)
            }
        }
    }
    pub type marisa_uint8 = u8;
    pub type marisa_uint16 = u16;
    pub type marisa_uint32 = u32;
    pub type marisa_uint64 = u64;
    pub const marisa_error_code__MARISA_OK: root::marisa_error_code_ = 0;
    pub const marisa_error_code__MARISA_STATE_ERROR: root::marisa_error_code_ = 1;
    pub const marisa_error_code__MARISA_NULL_ERROR: root::marisa_error_code_ = 2;
    pub const marisa_error_code__MARISA_BOUND_ERROR: root::marisa_error_code_ = 3;
    pub const marisa_error_code__MARISA_RANGE_ERROR: root::marisa_error_code_ = 4;
    pub const marisa_error_code__MARISA_CODE_ERROR: root::marisa_error_code_ = 5;
    pub const marisa_error_code__MARISA_RESET_ERROR: root::marisa_error_code_ = 6;
    pub const marisa_error_code__MARISA_SIZE_ERROR: root::marisa_error_code_ = 7;
    pub const marisa_error_code__MARISA_MEMORY_ERROR: root::marisa_error_code_ = 8;
    pub const marisa_error_code__MARISA_IO_ERROR: root::marisa_error_code_ = 9;
    pub const marisa_error_code__MARISA_FORMAT_ERROR: root::marisa_error_code_ = 10;
    pub type marisa_error_code_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_error_code_ as marisa_error_code;
    pub const marisa_num_tries__MARISA_MIN_NUM_TRIES: root::marisa_num_tries_ = 1;
    pub const marisa_num_tries__MARISA_MAX_NUM_TRIES: root::marisa_num_tries_ = 127;
    pub const marisa_num_tries__MARISA_DEFAULT_NUM_TRIES: root::marisa_num_tries_ = 3;
    pub type marisa_num_tries_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_num_tries_ as marisa_num_tries;
    pub const marisa_cache_level__MARISA_HUGE_CACHE: root::marisa_cache_level_ = 128;
    pub const marisa_cache_level__MARISA_LARGE_CACHE: root::marisa_cache_level_ = 256;
    pub const marisa_cache_level__MARISA_NORMAL_CACHE: root::marisa_cache_level_ = 512;
    pub const marisa_cache_level__MARISA_SMALL_CACHE: root::marisa_cache_level_ = 1024;
    pub const marisa_cache_level__MARISA_TINY_CACHE: root::marisa_cache_level_ = 2048;
    pub const marisa_cache_level__MARISA_DEFAULT_CACHE: root::marisa_cache_level_ = 512;
    pub type marisa_cache_level_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_cache_level_ as marisa_cache_level;
    pub const marisa_tail_mode__MARISA_TEXT_TAIL: root::marisa_tail_mode_ = 4096;
    pub const marisa_tail_mode__MARISA_BINARY_TAIL: root::marisa_tail_mode_ = 8192;
    pub const marisa_tail_mode__MARISA_DEFAULT_TAIL: root::marisa_tail_mode_ = 4096;
    pub type marisa_tail_mode_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_tail_mode_ as marisa_tail_mode;
    pub const marisa_node_order__MARISA_LABEL_ORDER: root::marisa_node_order_ = 65536;
    pub const marisa_node_order__MARISA_WEIGHT_ORDER: root::marisa_node_order_ = 131072;
    pub const marisa_node_order__MARISA_DEFAULT_ORDER: root::marisa_node_order_ = 131072;
    pub type marisa_node_order_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_node_order_ as marisa_node_order;
    pub const marisa_config_mask__MARISA_NUM_TRIES_MASK: root::marisa_config_mask_ = 127;
    pub const marisa_config_mask__MARISA_CACHE_LEVEL_MASK: root::marisa_config_mask_ = 3968;
    pub const marisa_config_mask__MARISA_TAIL_MODE_MASK: root::marisa_config_mask_ = 61440;
    pub const marisa_config_mask__MARISA_NODE_ORDER_MASK: root::marisa_config_mask_ = 983040;
    pub const marisa_config_mask__MARISA_CONFIG_MASK: root::marisa_config_mask_ = 1048575;
    pub type marisa_config_mask_ = ::std::os::raw::c_uint;
    pub use self::super::root::marisa_config_mask_ as marisa_config_mask;
    extern "C" {
        #[link_name = "\u{1}_Z16marisa_agent_keyPN6marisa5AgentE"]
        pub fn marisa_agent_key(agent: *mut root::marisa::Agent) -> *const root::marisa::Key;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14marisa_key_ptrPKN6marisa3KeyE"]
        pub fn marisa_key_ptr(key: *const root::marisa::Key) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17marisa_key_lengthPKN6marisa3KeyE"]
        pub fn marisa_key_length(key: *const root::marisa::Key) -> u32;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19marisa_query_lengthPKN6marisa5QueryE"]
        pub fn marisa_query_length(query: *const root::marisa::Query) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18marisa_agent_queryPKN6marisa5AgentE"]
        pub fn marisa_agent_query(agent: *const root::marisa::Agent) -> *const root::marisa::Query;
    }
    #[test]
    fn __bindgen_test_layout_scoped_array_open0_scoped_array_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            >(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_scoped_array_open0_scoped_array_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            >(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<::std::os::raw::c_char>>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_scoped_array_open0_scoped_array_open1_Key_close1_close0_instantiation()
    {
        assert_eq!(
            ::std::mem::size_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<root::marisa::Key>>,
            >(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<root::marisa::Key>>
                )
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::marisa::scoped_array<root::marisa::scoped_array<root::marisa::Key>>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(
                    root::marisa::scoped_array<root::marisa::scoped_array<root::marisa::Key>>
                )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_scoped_array_open0_Key_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::marisa::scoped_array<root::marisa::Key>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::marisa::scoped_array<root::marisa::Key>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::marisa::scoped_array<root::marisa::Key>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::marisa::scoped_array<root::marisa::Key>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_scoped_ptr_open0_State_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::marisa::scoped_ptr<root::marisa::grimoire::trie::State>>(),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::marisa::scoped_ptr<root::marisa::grimoire::trie::State>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::marisa::scoped_ptr<root::marisa::grimoire::trie::State>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::marisa::scoped_ptr<root::marisa::grimoire::trie::State>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_scoped_ptr_open0_LoudsTrie_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::marisa::scoped_ptr<root::marisa::grimoire::trie::LoudsTrie>>(
            ),
            8usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::marisa::scoped_ptr<root::marisa::grimoire::trie::LoudsTrie>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::marisa::scoped_ptr<root::marisa::grimoire::trie::LoudsTrie>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::marisa::scoped_ptr<root::marisa::grimoire::trie::LoudsTrie>)
            )
        );
    }
    use ::std::slice;
    use ::std::str;
    use ::std::io;
    use ::std::io::stderr;
    #[test]
     fn test() {
        unsafe {
            let mut keyset = root::marisa::Keyset::new();
            keyset.push_back2("a".to_string());
            keyset.push_back2("app".to_string());
            keyset.push_back2("apple".to_string());

            let mut trie = marisa::Trie::new();
            trie.build(&mut keyset as *mut marisa::Keyset, 0);

            let mut agent = marisa::Agent::new();
            agent.set_query("apple".to_string());
            let query = marisa_agent_query(&mut agent as *mut marisa::Agent);
            let qlen = marisa_query_length(query);
            assert_eq!(5, qlen);
            let mut seen = 0;
            while trie.common_prefix_search(&mut agent as *mut marisa::Agent) {
                let key = agent.key().as_ref().expect("ref");
                let length = marisa_key_length(key);
                let ptr = key.ptr();
                let key_string = slice::from_raw_parts(ptr, length as usize);
                let p = str::from_utf8(key_string)
                    .expect("HAHA");
seen+=1;
                assert_eq!(p, "pen");

                // println!("{}", agent.key().ptr(), agent.key().length())
            }
            assert_eq!(seen, 3);
        }
        /*
          keyset.push_back("a");
  keyset.push_back("app");
  keyset.push_back("apple");

  marisa::Trie trie;
  trie.build(keyset);

  marisa::Agent agent;
  agent.set_query("apple");
  while (trie.common_prefix_search(agent)) {
    std::cout.write(agent.key().ptr(), agent.key().length());
    std::cout << ": " << agent.key().id() << std::endl;
  }
  return 0;
         */
    }
}
